version: 2
jobs:
  kinetic:
    machine:
      image: circleci/classic:edge
      docker_layer_caching: true
    steps:
      - checkout
      - run:
          name: Install Linuxcan on Host
          command: |
            sudo apt-add-repository -y ppa:jwhitleyastuff/linuxcan-dkms
            sudo apt-get clean && sudo apt-get update -qq && sudo apt-get install dpkg # Fix dpkg bug
            sudo apt-get install -y linux-headers-`uname -r` linuxcan-dkms
            sudo depmod
            sudo virtualcan.sh start
            cd /usr/src/linuxcan-*/canlib/examples
            ./listChannels
      - run:
          name: Clone and Run AS Docker Image
          command: |
            docker pull autonomoustuff/docker-builds:kinetic-ros-base
            docker run -d --name test --device=/dev/kvvirtualcan0 --device=/dev/kvvirtualcan1 -v `pwd`:/ros_ws/src -w /ros_ws autonomoustuff/docker-builds:kinetic-ros-base sh -c "sleep infinity"
      - run:
          name: Install Linuxcan in Docker
          command: |
            docker exec test /bin/bash -c "apt-add-repository -y ppa:jwhitleyastuff/linuxcan-dkms && apt update -qq"
            docker exec test /bin/bash -c "apt install -y linux-headers-generic linuxcan-dkms"
      - run:
          name: Set Up ROS in Docker
          command: |
            docker exec test /bin/bash -c "source \`find /opt/ros -name setup.bash | sort | head -1\` && rosdep install --from-paths src --ignore-src -y"
            docker exec test /bin/bash -c "source \`find /opt/ros -name setup.bash | sort | head -1\` && catkin init && catkin config --extend /opt/ros/\$ROS_DISTRO"
      - run:
          name: Build in Docker
          command: |
            docker exec test /bin/bash -c "source \`find /opt/ros -name setup.bash | sort | head -1\` && catkin build"
      - run:
          name: Run Tests in Docker
          command: |
            docker exec test /bin/bash -c "source \`find /opt/ros -name setup.bash | sort | head -1\` && catkin run_tests -j1 && catkin_test_results"
      - run:
          name: Shut Down Container
          command: |
            docker kill $(docker ps -l -q)
    working_directory: ~/src

  melodic:
    machine:
      image: circleci/classic:edge
      docker_layer_caching: true
    steps:
      - checkout
      - run:
          name: Install Linuxcan on Host
          command: |
            sudo apt-add-repository -y ppa:jwhitleyastuff/linuxcan-dkms
            sudo apt-get clean && sudo apt-get update -qq && sudo apt-get install dpkg # Fix dpkg bug
            sudo apt-get install -y linux-headers-`uname -r` linuxcan-dkms
            sudo depmod
            sudo virtualcan.sh start
            cd /usr/src/linuxcan-*/canlib/examples
            ./listChannels
      - run:
          name: Clone and Run AS Docker Image
          command: |
            docker pull autonomoustuff/docker-builds:melodic-ros-base
            docker run -d --name test --device=/dev/kvvirtualcan0 --device=/dev/kvvirtualcan1 -v `pwd`:/ros_ws/src -w /ros_ws autonomoustuff/docker-builds:melodic-ros-base sh -c "sleep infinity"
      - run:
          name: Install Linuxcan in Docker
          command: |
            docker exec test /bin/bash -c "apt-add-repository -y ppa:jwhitleyastuff/linuxcan-dkms && apt update -qq"
            docker exec test /bin/bash -c "apt install -y linux-headers-generic linuxcan-dkms"
      - run:
          name: Set Up ROS in Docker
          command: |
            docker exec test /bin/bash -c "source \`find /opt/ros -name setup.bash | sort | head -1\` && rosdep install --from-paths src --ignore-src -y"
            docker exec test /bin/bash -c "source \`find /opt/ros -name setup.bash | sort | head -1\` && catkin init && catkin config --extend /opt/ros/\$ROS_DISTRO"
      - run:
          name: Build in Docker
          command: |
            docker exec test /bin/bash -c "source \`find /opt/ros -name setup.bash | sort | head -1\` && catkin build"
      - run:
          name: Run Tests in Docker
          command: |
            docker exec test /bin/bash -c "source \`find /opt/ros -name setup.bash | sort | head -1\` && catkin run_tests -j1 && catkin_test_results"
      - run:
          name: Shut Down Container
          command: |
            docker kill $(docker ps -l -q)
    working_directory: ~/src

  kinetic_release:
    docker:
      - image: autonomoustuff/docker-builds:kinetic-ros-base
    steps:
      - checkout
      - run:
          name: Set Up Container
          command: |
            apt-add-repository -y ppa:jwhitleyastuff/linuxcan-dkms
            apt-get update -qq && apt-get install -y linux-headers-generic linuxcan-dkms dh-make python-bloom ruby
            gem install --no-rdoc --no-ri deb-s3
            source `find /opt/ros -name setup.bash | sort | head -1`
            rosdep install --from-paths . --ignore-src -y
      - run:
          name: Build
          command: |
            bloom-generate rosdebian --os-name ubuntu --os-version xenial --ros-distro kinetic
            sed -i '/dh_shlibdeps -l.*/ s/$/ --dpkg-shlibdeps-params=--ignore-missing-info/' debian/rules
            fakeroot debian/rules binary
      - run:
          name: Upload
          command: |
            cd ..
            deb-s3 upload -b autonomoustuff-repo -c xenial --preserve-versions $(ls *.deb) --access-key-id=$S3_ACCESS_KEY_ID --secret-access-key=$S3_SECRET_ACCESS_KEY
    working_directory: ~/src

  melodic_release:
    docker:
      - image: autonomoustuff/docker-builds:melodic-ros-base
    steps:
      - checkout
      - run:
          name: Set Up Container
          command: |
            apt-add-repository -y ppa:jwhitleyastuff/linuxcan-dkms
            apt-get update -qq && apt-get install -y linux-headers-generic linuxcan-dkms dh-make python-bloom ruby
            gem install --no-rdoc --no-ri deb-s3
            source `find /opt/ros -name setup.bash | sort | head -1`
            rosdep install --from-paths . --ignore-src -y
      - run:
          name: Build
          command: |
            bloom-generate rosdebian --os-name ubuntu --os-version bionic --ros-distro melodic
            sed -i '/dh_shlibdeps -l.*/ s/$/ --dpkg-shlibdeps-params=--ignore-missing-info/' debian/rules
            fakeroot debian/rules binary
      - run:
          name: Upload
          command: |
            cd ..
            deb-s3 upload -b autonomoustuff-repo -c bionic --preserve-versions $(ls *.deb) --access-key-id=$S3_ACCESS_KEY_ID --secret-access-key=$S3_SECRET_ACCESS_KEY
    working_directory: ~/src

workflows:
  version: 2
  ros_build:
    jobs:
      - kinetic
      - melodic
  ros_release:
    jobs:
      - kinetic_release:
          context: ubuntu-pkg-build
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^[0-9]*.[0-9]*.[0-9]*$/
      - melodic_release:
          context: ubuntu-pkg-build
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^[0-9]*.[0-9]*.[0-9]*$/
